package org.csystem.util;


class NumberUtil {


public static int countDigits(int val)
	{		
		return val == 0 ? 1 : (int) Math.log10(Math.abs(val)) + 1;		
	}	





public static long factorial(int n)
	{
		long result = 1;
		
		for (int i = 2; i <= n; ++i)
			result *= i;
		
		return result;
	}



public static int getDigitsCount(int val)
	{		
		int count = 0;
		
		do {
			++count;
			val /= 10;
		} while (val != 0);		
		
		return count;
	}




public static int getDigitsSum(int val)
	{
		int sum = 0;
		
		while (val != 0) {
			sum += val % 10;
			val /= 10;
		}
		
		return sum;
	}




public static int getNextFibonacciNumber(int val)
	{
		if (val < 0)
			return 0;
		
		int prev1 = 1, prev2 = 0, result;
		
		for (;;) {
			result = prev1 + prev2;
			if (result > val)
				return result;
			
			prev2 = prev1;
			prev1 = result;
		}	
	}	



public static boolean isPalindrome(int val)
	{
		return getReverse(val) == val;
	}




public static int getPrime(int n)
	{
		if (n <= 0)
			return -1;
		
		int count = 0;
		int val = 2;
		
		for (;;) {
			if (isPrime(val))
				++count;
			
			if (count == n)
				return val;
			
			++val;
		}
	}



public static int getPowSum(int val)
	{
		int n = countDigits(val);
		int sum = 0;
				
		while (val != 0) {
			sum += Math.pow(val % 10, n); //**
			val /= 10;
		}
		
		return sum;
	}



public static int getReverse(int val)
	{
		int reverse = 0;
		
		while (val != 0) {
			reverse = reverse * 10 + val % 10;
			val /= 10;		
		}
		
		return reverse;
	}

*************************************************************************************************************
10-isArmstrong
*************************************************************************************************************

public static boolean isArmstrong(int val)
	{		
		return val >= 0 ? getPowSum(val) == val : false;		
	}


*************************************************************************************************************
11-isEven
*************************************************************************************************************

public static boolean isEven(int val)
	{
		return val % 2 == 0;		
	}


*************************************************************************************************************
12-isHarshad
*************************************************************************************************************


public static boolean isHarshad(int val)
	{
		if (val <= 0)
			return false;
		
		return val % getDigitsSum(val) == 0;
	}



*************************************************************************************************************
13-isPrime
*************************************************************************************************************


public static boolean isPrime(int val)
	{
		if (val <= 1)
			return false;
		
		if (val % 2 == 0)
			return val == 2;
		
		if (val % 3 == 0)
			return val == 3;
		
		if (val % 5 == 0)
			return val == 5;
		
		if (val % 7 == 0)
			return val == 7;
		
		for (int i = 11; i * i <= val; i += 2)
			if (val % i == 0)
				return false;
		
		return true;
	}


*************************************************************************************************************
14-isPrimeSlow
*************************************************************************************************************

public static boolean isPrimeSlow(int val)
	{
		if (val <= 1)
			return false;
		
		int halfVal = val / 2;
		
		int count = 0; 
		
		for (int i = 2; i <= halfVal; ++i) {
			++count;
			if (val % i == 0)
				return false;
		}
		
		System.out.printf("isPrimeSlow:count=%d%n", count);
		
		return true;
	}


*************************************************************************************************************
15-isOdd
*************************************************************************************************************

public static boolean isOdd(int val)
	{
		return !isEven(val);		
	}


*************************************************************************************************************
16-mid
*************************************************************************************************************

public static int mid(int a, int b, int c)
	{
		if (a <= b && b <= c || c <= b && b <= a)
			return b;
		
		if (b <= a && a <= c || c <= a && a <= b)
			return a;
		
		return c;
	}


*************************************************************************************************************
17-min
*************************************************************************************************************

public static int min(int a, int b, int c)
	{
		return (a < b) ? (a < c ? a : c) : (b < c ? b : c);

	}


*************************************************************************************************************
18-pow

*************************************************************************************************************

public static int pow(int a, int b)
	{
		int result = 1;
		
		for (int i = 0; i < b; ++i)
			result *= a;
		
		return result;
	}



}